name: Python Flask CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  FLASK_ENV: production
  PORT: 5000

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.10", "3.13"]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Verify Flask server starts
      run: |
        python server.py &
        sleep 10
        curl http://localhost:5000 | grep "Welcome"
        kill $(lsof -t -i:5000)

  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      artifact-name: ${{ steps.set-artifact.outputs.name }}

    steps:
    - uses: actions/checkout@v4

    - name: Create deployment package
      run: |
        mkdir -p package
        cp server.py package/
        [ -d src ] && cp -r src package/
        echo "FROM python:3.10-slim
        WORKDIR /server
        COPY . .
        RUN pip install flask gunicorn
        CMD gunicorn --bind :$PORT server:server" > package/Dockerfile

    - name: Set artifact name
      id: set-artifact
      run: echo "name=flask-server-$(date +%s)" >> $GITHUB_OUTPUT

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.set-artifact.outputs.name }}
        path: package/

  deploy:
    needs: build
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.build.outputs.artifact-name }}

    - name: Set up Docker
      run: |
        # Проверяем доступность Docker
        docker --version
        docker-compose --version

    - name: Build and run container
      run: |
        # Переходим в папку с артефактами
        cd package
        
        # Останавливаем и удаляем старый контейнер (если есть)
        docker stop flask-container || true
        docker rm flask-container || true
        
        # Собираем и запускаем новый контейнер
        docker build -t flask-app .
        docker run -d `
          --name flask-container `
          -p 5000:5000 `
          -e FLASK_ENV=production `
          flask-app
        
        # Проверяем работу
        Start-Sleep -Seconds 10
        Invoke-WebRequest -Uri "http://localhost:5000" -UseBasicParsing | Select-Object -ExpandProperty Content

    - name: Verify deployment
      run: |
        $response = Invoke-WebRequest -Uri "http://localhost:5000" -UseBasicParsing
        if (-not ($response.Content -match "Welcome")) {
          Write-Error "Deployment verification failed"
          exit 1
        }
        Write-Output "Deployment successful"