
name: Python Flask CI/CD

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  FLASK_ENV: production
  PORT: 5000

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.10", "3.13"]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Verify Flask server starts
      run: |
        python server.py &
        sleep 10
        curl http://localhost:5000 | grep "Welcome"
        kill $(lsof -t -i:5000)

  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      artifact-name: ${{ steps.set-artifact.outputs.name }}

    steps:
    - uses: actions/checkout@v4

    - name: Create deployment package
      run: |
        mkdir -p package
        cp server.py package/
        [ -d src ] && cp -r src package/
        echo "FROM python:3.10-slim
        WORKDIR /server
        COPY . .
        RUN pip install flask gunicorn
        CMD gunicorn --bind :$PORT server:server" > package/Dockerfile

    - name: Set artifact name
      id: set-artifact
      run: echo "name=flask-server-$(date +%s)" >> $GITHUB_OUTPUT

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.set-artifact.outputs.name }}
        path: package/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.build.outputs.artifact-name }}

    - name: Setup SSH access
      run: |
        sudo apt-get install -y sshpass
        sshpass -p "${{ secrets.VM_SSH_PASSWORD }}" ssh-copy-id \
          -o StrictHostKeyChecking=no \
          -o UserKnownHostsFile=/dev/null \
          -f \
          ${{ secrets.VM_SSH_USER }}@${{ secrets.VM_IP }}

    - name: Copy files to VM
      run: |
        scp -r * ${{ secrets.VM_SSH_USER }}@${{ secrets.VM_IP }}:/opt/flask-app/

    - name: Deploy application on VM
      run: |
        ssh ${{ secrets.VM_SSH_USER }}@${{ secrets.VM_IP }} << 'EOF'
        cd /tmp/flask-app
        docker stop flask-app || true
        docker rm flask-app || true
        docker build -t flask-app .
        sleep 30
        docker run -d \
          --name flask-app \
          --restart always \
          -p 80:$PORT \
          -e FLASK_ENV=production \
          flask-app
        EOF

    - name: Verify deployment
      run: |
        curl -sSf http://${{ secrets.VM_IP }} | grep "Welcome" || (echo "Deployment verification failed!" && exit 1)
        echo "Application deployed successfully!"