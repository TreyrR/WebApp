name: Python Flask CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  FLASK_ENV: production
  PORT: 5000

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.10", "3.13"]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Verify Flask server starts
      run: |
        python server.py &
        sleep 10
        curl http://localhost:5000 | grep "Welcome"
        kill $(lsof -t -i:5000)

  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      artifact-name: ${{ steps.set-artifact.outputs.name }}

    steps:
    - uses: actions/checkout@v4

    - name: Create deployment package
      run: |
        mkdir -p package
        cp server.py package/
        [ -d src ] && cp -r src package/
        echo "FROM python:3.10-slim
        WORKDIR /server
        COPY . .
        RUN pip install flask gunicorn
        CMD gunicorn --bind :$PORT server:server" > package/Dockerfile

    - name: Set artifact name
      id: set-artifact
      run: echo "name=flask-server-$(date +%s)" >> $GITHUB_OUTPUT

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.set-artifact.outputs.name }}
        path: package/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.build.outputs.artifact-name }}

    - name: Deploy to Render
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
      run: |
        # Установка зависимостей
        sudo apt-get update
        sudo apt-get install -y curl git bash

        # Проверка доступа
        curl -v https://cli.render.com/install.sh

        # Установка CLI с обработкой ошибок
        if ! curl -fsSL https://cli.render.com/install.sh | bash; then
          echo "⚠️ Failed to install Render CLI"
          echo "Trying alternative method..."
          wget https://cli.render.com/install.sh -O install.sh
          bash install.sh
        fi

        # Проверка установки
        render --version

        # Деплой с таймаутом
        timeout 300 render services create \
          --name flask-server-${{ github.run_id }} \
          --type web \
          --dockerfile Dockerfile \
          --env PORT=$PORT \
          --api-key $RENDER_API_KEY || echo "Deploy timeout reached"